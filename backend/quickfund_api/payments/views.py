from datetime import timezone
from rest_framework import generics, status, permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from .models import Repayment
from .serializers import RepaymentSerializer, InitiateRepaymentSerializer

class RepaymentListView(generics.ListAPIView):
    """List user's repayments"""
    serializer_class = RepaymentSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_queryset(self):
        if self.request.user.role == 'admin':
            return Repayment.objects.all()
        return Repayment.objects.filter(loan__user=self.request.user)


class RepaymentDetailView(generics.RetrieveAPIView):
    """Get repayment details"""
    serializer_class = RepaymentSerializer
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = 'id'
    lookup_url_kwarg = 'repayment_id'
    
    def get_queryset(self):
        if self.request.user.role == 'admin':
            return Repayment.objects.all()
        return Repayment.objects.filter(loan__user=self.request.user)


class InitiateRepaymentView(generics.CreateAPIView):
    """Initiate loan repayment"""
    serializer_class = InitiateRepaymentSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        # Process payment initiation
        repayment = serializer.save()
        
        # Trigger payment processing
        from .tasks import process_payment_initiation
        process_payment_initiation.delay(repayment.id)
        
        return Response({
            'message': 'Payment initiated successfully',
            'repayment_id': repayment.id,
            'payment_url': repayment.payment_url  # Generated by payment gateway
        }, status=status.HTTP_201_CREATED)


@api_view(['POST'])
@permission_classes([permissions.AllowAny])  # Webhook from payment gateway
def payment_callback(request):
    """Handle payment gateway callbacks"""
    # Verify webhook signature
    # Process payment confirmation
    # Update repayment status
    
    reference = request.data.get('reference')
    status_from_gateway = request.data.get('status')
    
    try:
        repayment = Repayment.objects.get(payment_reference=reference)
        
        if status_from_gateway == 'success':
            repayment.status = 'completed'
            repayment.paid_at = timezone.now()
            
            # Update loan balance
            loan = repayment.loan
            loan.balance -= repayment.amount
            if loan.balance <= 0:
                loan.status = 'completed'
            loan.save()
            
        else:
            repayment.status = 'failed'
        
        repayment.save()
        
        return Response({'status': 'success'})
        
    except Repayment.DoesNotExist:
        return Response({'error': 'Invalid reference'}, status=400)


PaymentCallbackView = payment_callback